defunc (clip_ground [x y]
	[rect2(-0.5 -1.5 1 1) rect2(*(x 32) *(y 32) 32 32)]
)
defunc (clip_box [x y]
	[rect2(-0.5 -1.5 1 2) rect2(*(x 32) *(y 32) 32 64)]
)
defunc (clip_wall [x y]
	[rect2(-0.5 -0.5 1 1) rect2(*(x 32) *(y 32) 32 32)]
)
defunc (clip_cover [x y]
	[rect2(-0.5 -0.5 1 1) rect2(*(x 32) *(y 32) 32 32)]
)
defunc (clip16_cover [x y]
	[rect2(-0.25 -0.25 0.5 0.5) rect2(*(x 16) *(y 16) 16 16)]
)
defunc (clip_build [x y]
	[rect2(-0.5 -0.5 1 1) rect2(*(x 32) *(y 32) 32 32)]
)
defunc (anim_build [x y frame is_reverse]
	var (res array/unfold(frame fn ([f] clip_build (+(x f) y))))
	if (is_reverse
		array/reverse (res)
		res
	)
)
defunc (clip3x3_build [x y]
	[rect2(-1.5 -2.5 3 3) rect2(*(x 96) *(y 96) 96 96)]
)
defunc (clip3x4_build [x y]
	[rect2(-1.5 -3.5 3 4) rect2(*(x 96) *(y 128) 96 128)]
)
defunc (clip3x5_build [x y]
	[rect2(-1.5 -4.5 3 5) rect2(*(x 96) *(y 160) 96 160)]
)
defunc (clip_char [x]
	[rect2(-1.5 -2 3 3) rect2(*(x 96) 0 96 96)]
)
defunc (anim_char [frame]
	array/unfold(frame clip_char)
)
defunc (clip_item [x y]
	rect2(*(x 32) *(y 32) 32 32)
)

defvar(*atile_rules_3x3x1* [[
	[
		0	-1	0
		-1	0	1
		0	1	1
	] {
		cover {
			cur_draw &corner_nw
		}
	}
][
	[
		0	-1	0
		1	0	-1
		1	1	0
	] {
		cover {
			cur_draw &corner_ne
		}
	}
][
	[
		1	1	0
		1	0	-1
		0	-1	0
	] {
		cover {
			cur_draw &corner_se
		}
	}
][
	[
		0	1	1
		-1	0	1
		0	-1	0
	] {
		cover {
			cur_draw &corner_sw
		}
	}
][
	[
		0	-1	0
		1	0	1
		1	1	1
	] {
		cover {
			cur_draw &side_n
		}
	}
][
	[
		1	1	0
		1	0	-1
		1	1	0
	] {
		cover {
			cur_draw &side_e
		}
	}
][
	[
		1	1	1
		1	0	1
		0	-1	0
	] {
		cover {
			cur_draw &side_s
		}
	}
][
	[
		0	1	1
		-1	0	1
		0	1	1
	] {
		cover {
			cur_draw &side_w
		}
	}
][
	[
		1	1	1
		1	0	1
		1	1	1
	] {
		cover {
			cur_draw &center
		}
	}
][
	[
		-1	1	1
		1	0	1
		1	1	1
	] {
		cover {
			cur_draw &concave_nw
		}
	}
][
	[
		1	1	-1
		1	0	1
		1	1	1
	] {
		cover {
			cur_draw &concave_ne
		}
	}
][
	[
		1	1	1
		1	0	1
		1	1	-1
	] {
		cover {
			cur_draw &concave_se
		}
	}
][
	[
		1	1	1
		1	0	1
		-1	1	1
	] {
		cover {
			cur_draw &concave_sw
		}
	}
]])

defvar(*atile_rules_3x3x1_crossed* array/concat(*atile_rules_3x3x1* [[
	[
		-1	1	1
		1	0	1
		1	1	-1
	] {
		cover {
			cur_draw &concaves_nw_se
		}
	}
][
	[
		1	1	-1
		1	0	1
		-1	1	1
	] {
		cover {
			cur_draw &concaves_ne_sw
		}
	}
]]))

defvar(*atile_wall_rules_3x3x1* [[
	[
		0	0	0
		-1	0	0
		0	-1	0
	] {
		cover {
			cur_draw &bottom_left
		}
	}
] [
	[
		0	0	0
		0	0	-1
		0	-1	0
	] {
		cover {
			cur_draw &bottom_right
		}
	}
] [
	[
		0	0	0
		0	0	0
		0	-1	0
	] {
		cover {
			cur_draw &bottom_centre
		}
	}
] [
	[
		0	-1	0
		-1	0	0
		0	0	0
	] {
		cover {
			cur_draw &top_left
		}
	}
] [
	[
		0	-1	0
		0	0	-1
		0	0	0
	] {
		cover {
			cur_draw &top_right
		}
	}
] [
	[
		0	-1	0
		0	0	0
		0	0	0
	] {
		cover {
			cur_draw &top_center
		}
	}
] [
	[
		0	0	0
		-1	0	0
		0	1	0
	] {
		cover {
			cur_draw &left
		}
	}
] [
	[
		0	0	0
		0	0	-1
		0	1	0
	] {
		cover {
			cur_draw &right
		}
	}
] [
	[
		0	0	0
		0	0	0
		0	1	0
	] {
		cover {
			cur_draw &center
		}
	}
]])

defvar(*atile_top_rules_3x3x1* [[
	[
		0	-1	0
		-1	0	1
		0	1	1
	] {
		cover {
			cur_draw &corner_nw
		}
	}
][
	[
		0	-1	0
		1	0	-1
		1	1	0
	] {
		cover {
			cur_draw &corner_ne
		}
	}
][
	[
		1	1	0
		1	0	-1
		0	-1	0
	] {
		cover {
			cur_draw &corner_se
		}
	}
][
	[
		0	1	1
		-1	0	1
		0	-1	0
	] {
		cover {
			cur_draw &corner_sw
		}
	}
][
	[
		0	-1	0
		1	0	1
		0 	-1	0
	] {
		cover {
			cur_draw &side_n
		}
	}
][
	[
		0	1	0
		-1	0	-1
		0	1	0
	] {
		cover {
			cur_draw &side_e
		}
	}
][
	[
		0	-1	0
		1	0	1
		0	-1	0
	] {
		cover {
			cur_draw &side_s
		}
	}
][
	[
		0	1	0
		-1	0	-1
		0	1	0
	] {
		cover {
			cur_draw &side_w
		}
	}
][
	[
		-1	1	1
		1	0	1
		1	1	1
	] {
		cover {
			cur_draw &concave_nw
		}
	}
][
	[
		1	1	-1
		1	0	1
		1	1	1
	] {
		cover {
			cur_draw &concave_ne
		}
	}
][
	[
		1	1	1
		1	0	1
		1	1	-1
	] {
		cover {
			cur_draw &concave_se
		}
	}
][
	[
		1	1	1
		1	0	1
		-1	1	1
	] {
		cover {
			cur_draw &concave_sw
		}
	}
]])
