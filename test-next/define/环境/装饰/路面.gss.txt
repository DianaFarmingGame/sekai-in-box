defvar (road/make func([ref id name x_offset diverse]
	define/make (load ("随机装饰面.gd")
		ref ref
		id id
		name name
		props {
			asserts {
				main load ("路面.png")
			}
			cur_draw &center
			draw_data {
				corner_nw [&static &main clip_ground(+(x_offset 0) 0)]
				corner_ne [&static &main clip_ground(+(x_offset 2) 0)]
				corner_se [&static &main clip_ground(+(x_offset 2) 2)]
				corner_sw [&static &main clip_ground(+(x_offset 0) 2)]
				side_n [&static &main clip_ground(+(x_offset 1) 0)]
				side_e [&static &main clip_ground(+(x_offset 2) 1)]
				side_s [&static &main clip_ground(+(x_offset 1) 2)]
				side_w [&static &main clip_ground(+(x_offset 0) 1)]
				center if(diverse
					[&diverse [
						[&static &main clip_ground(+(x_offset 1) 1)]
						[&static &main clip_ground(+(x_offset 0) 5)]
						[&static &main clip_ground(+(x_offset 1) 5)]
					]]
					[&static &main clip_ground(+(x_offset 1) 1)])
				concave_nw [&static &main clip_ground(+(x_offset 0) 3)]
				concave_ne [&static &main clip_ground(+(x_offset 1) 3)]
				concave_se [&static &main clip_ground(+(x_offset 1) 4)]
				concave_sw [&static &main clip_ground(+(x_offset 0) 4)]
				concaves_nw_se [&static &main clip_ground(+(x_offset 2) 4)]
				concaves_ne_sw [&static &main clip_ground(+(x_offset 2) 3)]
			}
			random_rules if(diverse
				[
					[1 { cover { cur_draw_variant 1 }}]
					[1 { cover { cur_draw_variant 2 }}]
					[3 {}]
				]
				[])
			atile_size vec3(3 3 1)
			groups prop/pushs([id])
			atile_matches [[id &环境/空白]]
			atile_rules *atile_rules_3x3x1_crossed*
		})))

define/sign(road/make(2402 &环境/装饰/路面-土 "路面-土" 0 #f))
define/sign(road/make(2403 &环境/装饰/路面-石 "路面-石" 3 #t))
define/sign(road/make(2404 &环境/装饰/路面-草 "路面-草" 6 #f))
define/sign(road/make(2405 &环境/装饰/路面-砖 "路面-砖" 9 #t))
