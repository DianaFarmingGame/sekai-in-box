;; ID StringName
;; need [ [ID, int], [ID int], ...]
;; craft [ID, int]
;; desc String
;; fuel [ID, int]
;; time int

(block
	(csv/map-let (str/concat [*config_dir* "craft.csv"])
		[需求物品 合成物品 描述 消耗燃料 合成时间 是否为附魔]
		(if (!= 消耗燃料 "") 
			(dbs/define ["烹饪" (@ (string/split 合成物品 ":") 0) {
				need ( => 需求物品
					(string/split ";")
					(array/filter (func [l] (!= l "")))
					(array/map (
						func [l] ( => l
							(string/split ":")
							(array/map string/trim)
						)
					))
				)

				craft ( => 合成物品
					(string/split ":")
					(array/map string/trim)
				)

				desc 描述
				fuel ( => 消耗燃料
					(string/split ":")
					(array/map string/trim)
				)

				time (num 合成时间)
			}])

			(if (!= 是否为附魔 "")
				(dbs/define ["附魔" (@ (string/split 合成物品 ":") 0) {
					need ( => 需求物品
						(string/split ";")
						(array/filter (func [l] (!= l "")))
						(array/map (
							func [l] ( => l
								(string/split ":")
								(array/map string/trim)
							)
						))
					)

					craft ( => 合成物品
						(string/split ":")
						(array/map string/trim)
					)

					desc 描述
				}])

				(dbs/define ["合成" (@ (string/split 合成物品 ":") 0) {
					need ( => 需求物品
						(string/split ";")
						(array/filter (func [l] (!= l "")))
						(array/map (
							func [l] ( => l
								(string/split ":")
								(array/map string/trim)
							)
						))
					)

					craft ( => 合成物品
						(string/split ":")
						(array/map string/trim)
					)

					desc 描述
				}])
			)
		)
	)
)